start:= start = grammar $
grammar := declaration|assign|array|exp
TkSemicolon := value = 'TkSemicolon '
TkNumber := value = 'TkNumber\([0-9]+(?:\.[0-9]+)?\) '
TkId := value = 'TkId\(\b([a-zA-Z_][^\s\W]*)\) '
TkAssign := value = 'TkAssign '
TkOpenPar := value = 'TkOpenPar '
TkClosePar := value = 'TkClosePar '
TkOpenBracket := value = 'TkOpenBracket '
TkCloseBracket := value = 'TkCloseBracket '
TkOpenBrace := value = 'TkOpenBrace '
TkCloseBrace := value = 'TkCloseBrace '
TkPower := value = 'TkPower '
TkPlus := value = 'TkPlus '
TkMinus := value = 'TkMinus '
TkMult := value = 'TkMult '
TkDiv := value = 'TkDiv '
TkAnd := value = 'TkAnd '
TkOr := value = 'TkOr '
TkNot := value = 'TkNot '
TkMod := value = 'TkMod '
TkLT := value = 'TkLT '
TkLE := value = 'TkLE '
TkGE := value = 'TkGE '
TkGT := value = 'TkGT '
TkEQ := value = 'TkEQ '
TkNE := value = 'TkNE '
TkComma := value = 'TkComma '
TkNum := value = 'TkNum '
TkBool := value = 'TkBool '
TkQuote := value = 'TkQuote '
TkFalse := value = 'TkFalse '
TkTrue := value = 'TkTrue '
TkBoolean := TkFalse | TkTrue
Type := TkNum | TkBool
lambda := value = ''
space := ' ' | '\\t' | '\n' | '\r\n'

declaration := space* type=Type space* id=TkId space* symbol=TkAssign space* e=exp space* TkSemicolon space*
assign := space* id=TkId space* a={TkOpenBracket next=exp TkCloseBracket}? space* symbol=TkAssign space* e=exp space* TkSemicolon space*
array := space* p1=TkOpenBracket space* type=Type space* p2=TkCloseBracket space* id=TkId space* symbol=TkAssign space* e=exp space* TkSemicolon space*

unary := TkPlus | TkMinus | TkNot 
terms := TkNumber | TkBoolean | value=TkId a={TkOpenBracket next=exp TkCloseBracket}? b={TkOpenPar next=termino? TkClosePar}?

exp := space* e=e1 space*

e1 := e=e2 space* a={op={TkAnd | TkOr} next=e2}*
e2 := e=e3 space* a={op={TkEQ | TkNE} next=e3}*
e3 := e=e4 space* a={op={TkLT | TkLE | TkGE | TkGT} next=e4}*
e4 := e=e5 space* a={op={TkPlus | TkMinus} next=e5}*
e5 := e=e6 space* a={op={TkMult | TkDiv | TkMod} next=e6}*
e6 := uop=unary* space* e=e7 space*
e7 := e=e8 space* a={op={TkPower} next=e8}*
e8 := TkOpenPar space* value=exp space* TkClosePar | TkOpenBracket space* value=termino? space* TkCloseBracket | TkOpenBrace space* value=exp space* TkCloseBrace | TkQuote space* value=exp space* TkQuote | terms
termino := space* e=exp space* b={TkComma e=exp}* space*